// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String @map("_id")  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String @map("_id")   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @map("_id")  @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  createdSubreddits Subreddit[] @relation("CreatedBy")

username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]
  Post Post[]
  Comment Comment[]
  CommentVote CommentVote[]
  Vote Vote[]
  Subscription Subscription[]
}

model Subreddit {
  id            String  @map("_id")  @id @default(cuid())
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]

creatorId String?
Creator User? @relation("CreatedBy",fields: [creatorId],references: [id])
subscribers Subscription[]

}

model Subscription {
id            String  @map("_id")  @id @default(cuid())
user User @relation(fields: [userId],references: [id])
userId String
subreddit Subreddit @relation(fields: [subredditId],references: [id])
subredditId String
}

model Post {
id            String  @map("_id")  @id @default(cuid())
title String
content Json?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
subreddit Subreddit @relation(fields: [subredditId],references: [id])
subredditId String

author User @relation(fields: [authorId],references: [id])
authorId String

comments Comment[]
votes Vote[]
}

model Comment {
id            String  @map("_id")  @id @default(cuid())
text String
createdAt DateTime @default(now())
author User @relation(fields: [authorId],references: [id])
authorId String
post Post @relation(fields: [postId],references: [id])
postId String

replyToId String?
replyTo Comment? @relation("ReplyTo",fields: [replyToId],references: [id],onDelete: NoAction,onUpdate: NoAction)
replies Comment[] @relation("ReplyTo")

votes CommentVote[]
commentId String?

}

enum VoteType {
UP
DOWN
}

model Vote {
id            String  @map("_id")  @id @default(cuid())
user User @relation(fields: [userId],references: [id])
userId String
post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
postId String
type VoteType

}

model CommentVote {
id            String  @map("_id")  @id @default(cuid())
user User @relation(fields: [userId],references: [id])
userId String
comment Comment @relation(fields: [commentId],references: [id])
commentId String
type VoteType

}
